openapi: 3.1.1
info:
  title: WatchExpense API
  version: 1.0.0
  summary: WatchExpense API Documentation
  description: WatchExpense is a comprehensive expense management system designed to streamline the process of managing expenses, advance requests, and user accounts. It provides features for user authentication, role-based access control, and detailed expense tracking.
servers:
  - url: http://localhost:8080/api/v1
    description: Development server
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticate a user and set a Bearer (JWT token) cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login Successful. Bearer token is set in a cookie.
          headers:
            Set-Cookie:
              description: Bearer token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      description: Invalidate the Bearer token and clear the cookie.
      responses:
        '200':
          description: Logout Successful. Bearer token cookie is cleared.
          headers:
            Set-Cookie:
              description: Clear Bearer token cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - BearerAuth: []
  /users:
    get:
      tags:
        - User
      summary: Get all users (admin only)
      description: Retrieve a list of all registered users.
      parameters:
        - $ref: '#/components/parameters/role'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - in: query
          name: search
          required: false
          schema:
            type: string
            description: Search term for user name or email
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - BearerAuth: []
    post:
      tags:
        - User
      summary: Create a new user (admin only)
      description: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [EMPLOYEE, PROJECT_MANGER, MANAGER, ADMIN]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - BearerAuth: []
  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by ID (user and admin)
      description: Retrieve a user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                    enum: [EMPLOYEE, PROJECT_MANGER, MANAGER, ADMIN]
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    put:
      tags:
        - User
      summary: Update user by ID (admin only)
      description: Update user details by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                  enum: [EMPLOYEE, PROJECT_MANGER, MANAGER, ADMIN]
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    delete:
      tags:
        - User
      summary: Delete user by ID (admin only)
      description: Delete a user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
  /users/{id}/expenses:
    get:
      tags:
        - Expense
      summary: Get expenses by user ID (employee and manager/admin)
      description: Retrieve a list of expenses for a specific user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            description: User ID to filter expenses
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of expenses for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - BearerAuth: []
  /expenses:
    get:
      tags:
        - Expense
      summary: Get all expenses (based on role)
      description: Retrieve a list of expenses based on user role and the filters passed.
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
    post:
      tags:
        - Expense
      summary: Create a new expense (employee only)
      description: Create a new expense request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                amount:
                  type: number
                  format: float
                description:
                  type: string
      responses:
        '201':
          description: Expense created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Expense created successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
  /expenses/{id}:
    get:
      tags:
        - Expense
      summary: Get expense by ID (employee and manager/admin)
      description: Retrieve an expense by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Expense details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    put:
      tags:
        - Expense
      summary: Update expense by ID (employee and manager/admin)
      description: Update an existing expense by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                description:
                  type: string
                status:
                  type: string
                  enum: [PENDING, APPROVED, REJECTED]
      responses:
        '200':
          description: Expense updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Expense updated successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    delete:
      tags:
        - Expense
      summary: Delete expense by ID (employee and manager/admin)
      description: Delete an expense by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Expense deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
  /advance-requests:
    get:
      tags:
        - Advance
      summary: Get all advance requests (based on role)
      description: Retrieve a list of advance requests based on user role and the filters passed.
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of advance requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdvanceRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
    post:
      tags:
        - Advance
      summary: Create a new advance request (employee only)
      description: Create a new advance request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                amount:
                  type: number
                  format: float
                description:
                  type: string
      responses:
        '201':
          description: Advance request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advance request created successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
  /advance-requests/{id}:
    get:
      tags:
        - Advance
      summary: Get advance request by ID (employee and manager/admin)
      description: Retrieve an advance request by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Advance request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvanceRequest'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    put:
      tags:
        - Advance
      summary: Update advance request by ID (employee and manager/admin)
      description: Update an existing advance request by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                description:
                  type: string
                status:
                  type: string
                  enum: [PENDING, APPROVED, REJECTED]
      responses:
        '200':
          description: Advance request updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Advance request updated successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    delete:
      tags:
        - Advance
      summary: Delete advance request by ID (employee and manager/admin)
      description: Delete an advance request by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Advance request deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
  /admin/projects:
    get:
      tags:
        - Projects
      summary: Get all projects (admin only)
      description: Retrieve a list of all projects.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    startDate:
                      type: string
                      format: date
                    endDate:
                      type: string
                      format: date
                    employees:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
    post:
      tags:
        - Projects
      summary: Create a new project (admin only)
      description: Create a new project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Project created successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
  /admin/projects/{id}:
    get:
      tags:
        - Projects
      summary: Get project by ID (admin only)
      description: Retrieve a project by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  startDate:
                    type: string
                    format: date
                  endDate:
                    type: string
                    format: date
                  employees:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    put:
      tags:
        - Projects
      summary: Update project by ID (admin only)
      description: Update project details by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Project updated successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    delete:
      tags:
        - Projects
      summary: Delete project by ID (admin only)
      description: Delete a project by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Project deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
  /admin/departments:
    get:
      tags:
        - Departments
      summary: Get all departments (admin only)
      description: Retrieve a list of all departments.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of departments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
    post:
      tags:
        - Departments
      summary: Create a new department (admin only)
      description: Create a new department.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Department created successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - BearerAuth: []
  /admin/departments/{id}:
    get:
      tags:
        - Departments
      summary: Get department by ID (admin only)
      description: Retrieve a department by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Department details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    put:
      tags:
        - Departments
      summary: Update department by ID (admin only)
      description: Update department details by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Department updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Department updated successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    delete:
      tags:
        - Departments
      summary: Delete department by ID (admin only)
      description: Delete a department by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Department deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
  /admin/projects/{projectId}/employees:
    post:
      tags:
        - Projects
      summary: Add employee to project (admin only)
      description: Add an employee to a project.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeId:
                  type: integer
      responses:
        '200':
          description: Employee added to project successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Employee added to project successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    delete:
      tags:
        - Projects
      summary: Remove employee from project (admin only)
      description: Remove an employee from a project.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
        - name: employeeId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Employee removed from project successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
  /admin/departments/{departmentId}/employees:
    post:
      tags:
        - Departments
      summary: Add employee to department (admin only)
      description: Add an employee to a department.
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeId:
                  type: integer
      responses:
        '200':
          description: Employee added to department successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Employee added to department successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
    delete:
      tags:
        - Departments
      summary: Remove employee from department (admin only)
      description: Remove an employee from a department.
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: integer
        - name: employeeId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Employee removed from department successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
      - BearerAuth: []
components:
  parameters:
    status:
      name: status
      in: query
      required: false
      schema:
        type: string
        enum: [PENDING, APPROVED, REJECTED]
        description: Filter by advance request status
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1
        description: Page number for pagination
        example: 1
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        default: 10
        description: Number of items per page for pagination
        example: 10
    role:
      name: role
      in: query
      required: false
      schema:
        type: string
        enum: [EMPLOYEE, MANAGER, ADMIN]
        description: Filter by user role
  responses:
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Not authenticated or insufficient permissions
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid input
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Resource not found
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [EMPLOYEE, MANAGER, ADMIN]
    Expense:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        amount:
          type: number
          format: float
        description:
          type: string
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
    AdvanceRequest:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        amount:
          type: number
          format: float
        description:
          type: string
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    Department:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
